{
    // This file contains only common linting rules between bin/, src/, and
    // tests/.
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:eslint-plugin-unicorn/recommended"
    ],
    "plugins": [
        "@typescript-eslint",
        "eslint-plugin-unicorn"
    ],
    "parser": "@typescript-eslint/parser",
    "rules": {
        /*
         * CODE ERRORS
         * These are things that will affect the runtime and must be avoided.
         */
        "@typescript-eslint/method-signature-style": [
            "error",
            "method"
        ],
        "@typescript-eslint/prefer-for-of": "error",
        "default-case": "error",
        "default-case-last": "error",
        "no-eq-null": "error",
        /*
         * SPACING ERRORS
         * Spacing inconsistencies can cause problems with git and should be
         * avoided.
         */
        "@typescript-eslint/indent": [
            "error",
            4,
            {
                "SwitchCase": 0
            }
        ],
        "@typescript-eslint/padding-line-between-statements": [
            "error",
            // In order of precedence:
            // Never leave a blank line after a switch label
            {
                "blankLine": "never",
                "prev": [
                    "case",
                    "default"
                ],
                "next": "*"
            },
            // Always leave a blank line before these things
            {
                "blankLine": "always",
                "prev": "*",
                "next": [
                    "return",
                    "throw",
                    "break",
                    "continue",
                    "class",
                    "export",
                    "iife",
                    "interface",
                    "type"
                ]
            },
            // Always leave a blank line between assignment and a loop
            {
                "blankLine": "always",
                "prev": [
                    "const",
                    "let",
                    "var",
                    "expression"
                ],
                "next": [
                    "for",
                    "while",
                    "do"
                ]
            },
            // Always leave a blank line after a do-while statement
            {
                "blankLine": "always",
                "prev": "do",
                "next": "*"
            },
            // Always leave a blank line between a brace group and assignment
            {
                "blankLine": "always",
                "prev": "block-like",
                "next": [
                    "const",
                    "let",
                    "var",
                    "expression"
                ]
            }
        ],
        "comma-style": "error", // only affects multiline statements
        "eol-last": "error",
        "linebreak-style": [
            "error",
            "unix"
        ],
        "max-len": [
            "error",
            {
                "code": 80,
                "ignoreComments": false
            }
        ],
        "no-multi-str": "error",
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1
            }
        ],
        "no-trailing-spaces": "error",
        "padded-blocks": [
            "error",
            "never"
        ],
        "unicode-bom": "error",
        /*
         * SYNTAX ERRORS
         * These are generally undesirable patterns that are to be avoided,
         * even though most of them are technically not wrong. They could
         * indicate mistaken intent.
         */
        "@typescript-eslint/comma-dangle": "error",
        "@typescript-eslint/consistent-type-assertions": [
            "error",
            {
                "assertionStyle": "angle-bracket",
                "objectLiteralTypeAssertions": "allow-as-parameter"
            }
        ],
        "@typescript-eslint/func-call-spacing": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-duplicate-imports": "error",
        "@typescript-eslint/no-extra-parens": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/semi": "error",
        "@typescript-eslint/space-before-function-paren": [
            "error",
            "never"
        ],
        "@typescript-eslint/space-infix-ops": "error",
        "curly": "error", // missing braces after if, for, etc
        "dot-location": [
            "error",
            "property"
        ],
        "max-statements-per-line": "error",
        "new-cap": "error",
        "new-parens": "error",
        "no-alert": "error",
        "no-eval": "error",
        "no-extra-bind": "error",
        "no-floating-decimal": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-useless-escape": "error",
        "no-useless-rename": "error",
        "operator-linebreak": [
            "error",
            "before"
        ],
        "prefer-regex-literals": "error",
        "require-unicode-regexp": "error",
        "semi-spacing": "error",
        "space-unary-ops": "error",
        "wrap-iife": [
            "error",
            "inside"
        ],
        /*
         * STYLE WARNINGS
         * These are dispreffered styles that do not relate to git issues and
         * are not severe enough to be errors.
         */
        "@typescript-eslint/array-type": [
            "warn",
            {
                "default": "array",
                "readonly": "array-simple"
            }
        ],
        "@typescript-eslint/brace-style": "warn",
        "@typescript-eslint/class-literal-property-style": "warn",
        "@typescript-eslint/comma-spacing": "warn",
        "@typescript-eslint/consistent-indexed-object-style": [
            "warn",
            "index-signature"
        ],
        "@typescript-eslint/consistent-type-definitions": "warn",
        "@typescript-eslint/keyword-spacing": [
            "warn",
            {
                // Allow `<T>this` etc
                "overrides": {
                    "this": {
                        "before": false
                    }
                }
            }
        ],
        "@typescript-eslint/member-delimiter-style": [
            "warn",
            {
                // Require commas for type literals and semicolons for
                // interface declarations
                "overrides": {
                    "typeLiteral": {
                        "multiline": {
                            "delimiter": "comma",
                            "requireLast": false
                        },
                        "singleline": {
                            "delimiter": "comma"
                        }
                    },
                    "interface": {
                        "singleline": {
                            "requireLast": true
                        }
                    }
                }
            }
        ],
        "@typescript-eslint/member-ordering": [
            "warn",
            {
                "default": {
                    "memberTypes": [
                        "static-field",
                        "private-instance-field",
                        "public-instance-field",
                        "constructor",
                        "get",
                        "private-method",
                        "public-method"
                    ]
                }
            }
        ],
        "@typescript-eslint/object-curly-spacing": [
            "warn",
            "always"
        ],
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/sort-type-union-intersection-members": "warn",
        "@typescript-eslint/type-annotation-spacing": "warn",
        "@typescript-eslint/quotes": [
            "warn",
            "single",
            {
                "avoidEscape": true
            }
        ],
        "arrow-body-style": [
            "warn",
            "as-needed",
            {
                "requireReturnForObjectLiteral": true
            }
        ],
        "array-bracket-newline": [
            "warn",
            {
                "multiline": true
            }
        ],
        "array-bracket-spacing": "warn",
        "arrow-parens": [
            "warn",
            "as-needed"
        ],
        "arrow-spacing": "warn",
        "block-spacing": "warn",
        "camelcase": "warn",
        "func-names": [
            "warn",
            "never"
        ],
        "function-call-argument-newline": [
            "warn",
            "consistent"
        ],
        "function-paren-newline": [
            "warn",
            "multiline-arguments"
        ],
        "grouped-accessor-pairs": [
            "warn",
            "getBeforeSet"
        ],
        "id-length": [
            "warn",
            {
                "min": 3,
                "max": 25,
                "exceptions": [
                    "i", "j", // `for` loop indices
                    "el", // `.map()` argument
                    "_", // unused argument
                    "e", // caught error
                    "a", "b" // `.reduce()` arguments
                ],
                "exceptionPatterns": [
                    "[a-z]\\d" // one letter followed by a number
                ]
            }
        ],
        "key-spacing": [
            "warn",
            {
                "align": "value"
            }
        ],
        "multiline-ternary": [
            "warn",
            "always-multiline" // this is actually the middle option
        ],
        "newline-per-chained-call": "warn",
        "no-useless-concat": "warn",
        "no-whitespace-before-property": "warn",
        "object-curly-newline": "warn",
        "operator-assignment": "warn",
        "prefer-arrow-callback": "warn",
        "prefer-exponentiation-operator": "warn",
        "prefer-numeric-literals": "warn",
        "prefer-object-spread": "warn",
        "space-in-parens": "warn",
        "spaced-comment": [
            "warn",
            "always",
            {
                "markers": [
                    "!",
                    "*"
                ]
            }
        ],
        "switch-colon-spacing": "warn",
        "template-curly-spacing": "warn",
        "unicorn/catch-error-name": [
            "warn",
            {
                "name": "e"
            }
        ],
        "yoda": "warn",
        /*
         * CODE WARNINGS
         * These do not break anything, but should be avoided. If possible, the
         * build script will fix them, but if not it will just log a warning
         * and continue anyways.
         */
        "accessor-pairs": "warn",
        "no-else-return": "warn",
        "no-lonely-if": "warn",
        "no-negated-condition": "warn",
        "no-return-assign": "warn",
        /*
         * NON-PROBLEMS
         * These are things that are enabled by default that cause more harm
         * than good in this project.
         */
        // this catches things like `arr[i + 1]`
        "no-magic-numbers": "off",
        // I'm hiding these on purpose, thank you very much
        "unicorn/consistent-function-scoping": "off",
        // I wish this were configurable, e.g. enforce newline
        "unicorn/empty-brace-spaces": "off",
        "unicorn/filename-case": "off",
        "unicorn/no-array-callback-reference": "off",
        // this rule doesn't even make sense to me
        "unicorn/no-array-method-this-argument": "off",
        // this case is handled better by @typescript-eslint/prefer-for-of
        "unicorn/no-for-loop": "off",
        // conflicts with other things; `null` is `object`
        "unicorn/no-null": "off",
        // unicorn disagrees with TypeScript on what's "useless"
        "unicorn/no-useless-undefined": "off",
        // it's a shame only Infinity is configurable and not the rest
        "unicorn/prefer-number-properties": "off",
        // Since when is .substring() "lesser known"?
        "unicorn/prefer-string-slice": "off",
        // I'm not convinced by this one.
        "unicorn/prefer-query-selector": "off",
        "unicorn/prevent-abbreviations": "off"
    },
    "overrides": [
        {
            "files": "*.js",
            "env": {
                "node": true
            },
            "parserOptions": {
                "ecmaVersion": 10
            },
            "rules": {
                "eqeqeq": [
                    "error",
                    "smart"
                ],
                "@typescript-eslint/no-var-requires": "off",
                "unicorn/no-useless-undefined": "warn",
                "unicorn/prefer-module": "off"
            }
        }
    ]
}
