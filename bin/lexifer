#! /usr/bin/env node
"use strict"
/*! Lexifer TS v1.2.0-alpha.12 */
;/*!
 * Copyright (c) 2021 William Baker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */var _a,__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}}
Object.defineProperty(exports,"__esModule",{value:!0})
const fs_1=require("fs"),yargs_1=__importDefault(require("yargs/yargs")),dist_1=__importDefault(require("../dist")),encodings=["ascii","base64","binary","hex","latin1","ucs-2","ucs2","utf-8","utf16le","utf8"],argv=(0,yargs_1.default)(process.argv.slice(2)).alias({help:"?",version:"v"}).option("one-per-line",{alias:"o",describe:"Display one word per line",type:"boolean"}).option("unsorted",{alias:"u",describe:"Leave output unsorted",type:"boolean"}).option("number",{alias:"n",describe:"How many words to generate",type:"number"}).option("verbose",{alias:"V",describe:"Display all generation steps",type:"boolean"}).option("encoding",{alias:"e",describe:"What file encoding to use",default:"utf-8",choices:encodings,coerce:e=>{let r=e.toLowerCase()
if("utf-16le"===r)r="utf16le"
else if(!encodings.includes(r)){let r=`Invalid values:\n  Argument: encoding, Given: "${e}", Choices: `
for(let e=0;e<encodings.length;++e)0!==e&&(r+=", "),r+=`"${encodings[e]}"`
throw Error(r)}return r}}).check(e=>{const r=e._.length
if(r>1)throw Error(`Expected 1 file (saw ${r}).`)
return 0===e.number&&console.error("Cannot generate 0 words."),!0}).argv,fileDescriptor=null!==(_a=argv._[0])&&void 0!==_a?_a:0
try{const e=(0,fs_1.readFileSync)(fileDescriptor,argv.encoding)
console.log((0,dist_1.default)(e,argv.number,argv.verbose,argv.unsorted,argv["one-per-line"],e=>{e instanceof Error&&(process.exitCode=1),console.error(e)}))}catch(e){console.error("Error: No input or pipe provided; cannot read from stdin on Windows."),process.exitCode=1}
