{
    // This file contains environment information and TypeScript-related rules.
    "env": {
        "browser": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 8,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "rules": {
        /*
         * CODE ERRORS
         * These are things that will affect the runtime and must be avoided.
         */
        "@typescript-eslint/method-signature-style": [
            "error",
            "method"
        ],
        "@typescript-eslint/prefer-for-of": "error",
        /*
         * SPACING ERRORS
         * Spacing inconsistencies can cause problems with git and should be
         * avoided.
         */
        "@typescript-eslint/padding-line-between-statements": [
            "error",
            // In order of precedence:
            // Never leave a blank line after a switch label
            {
                "blankLine": "never",
                "prev": [
                    "case",
                    "default"
                ],
                "next": "*"
            },
            // Always leave a blank line before these things
            {
                "blankLine": "always",
                "prev": "*",
                "next": [
                    "return",
                    "throw",
                    "break",
                    "continue",
                    "class",
                    "export",
                    "iife",
                    "interface",
                    "type"
                ]
            },
            // Always leave a blank line between assignment and a loop
            {
                "blankLine": "always",
                "prev": [
                    "const",
                    "let",
                    "var",
                    "expression"
                ],
                "next": [
                    "for",
                    "while",
                    "do"
                ]
            },
            // Always leave a blank line after a do-while statement
            {
                "blankLine": "always",
                "prev": "do",
                "next": "*"
            },
            // Always leave a blank line between a brace group and assignment
            {
                "blankLine": "always",
                "prev": "block-like",
                "next": [
                    "const",
                    "let",
                    "var",
                    "expression"
                ]
            }
        ],
        /*
         * SYNTAX ERRORS
         * These are generally undesirable patterns that are to be avoided,
         * even though most of them are technically not wrong. They could
         * indicate mistaken intent.
         */
        "@typescript-eslint/comma-dangle": "error",
        "@typescript-eslint/consistent-type-assertions": [
            "error",
            {
                "assertionStyle": "angle-bracket",
                "objectLiteralTypeAssertions": "allow-as-parameter"
            }
        ],
        "@typescript-eslint/func-call-spacing": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-duplicate-imports": "error",
        "@typescript-eslint/no-extra-parens": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/semi": "error",
        "@typescript-eslint/space-before-function-paren": [
            "error",
            "never"
        ],
        "@typescript-eslint/space-infix-ops": "error",
        /*
         * STYLE WARNINGS
         * These are dispreffered styles that do not relate to git issues and
         * are not severe enough to be errors.
         */
        "@typescript-eslint/array-type": "warn",
        "@typescript-eslint/brace-style": "warn",
        "@typescript-eslint/class-literal-property-style": "warn",
        "@typescript-eslint/comma-spacing": "warn",
        "@typescript-eslint/consistent-indexed-object-style": [
            "warn",
            "index-signature"
        ],
        "@typescript-eslint/keyword-spacing": "warn",
        "@typescript-eslint/member-delimiter-style": [
            "warn",
            {
                // Require commas for type literals and semicolons for
                // interface declarations
                "overrides": {
                    "typeLiteral": {
                        "multiline": {
                            "delimiter": "comma",
                            "requireLast": false
                        },
                        "singleline": {
                            "delimiter": "comma"
                        }
                    },
                    "interface": {
                        "singleline": {
                            "requireLast": true
                        }
                    }
                }
            }
        ],
        "@typescript-eslint/member-ordering": [
            "warn",
            {
                "default": {
                    "memberTypes": [
                        "static-field",
                        "private-instance-field",
                        "public-instance-field",
                        "constructor",
                        "get",
                        "private-method",
                        "public-method"
                    ]
                }
            }
        ],
        "@typescript-eslint/object-curly-spacing": [
            "warn",
            "always"
        ],
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/sort-type-union-intersection-members": "warn",
        "@typescript-eslint/type-annotation-spacing": "warn",
        "@typescript-eslint/quotes": [
            "warn",
            "single",
            {
                "avoidEscape": true
            }
        ],
        /*
         * NON-PROBLEMS
         * These are things that are enabled by default that cause more harm
         * than good in this project.
         */
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unused-vars": [
            // genWords is used externally -- ONLY disable that.
            "warn",
            {
                "varsIgnorePattern": "^genWords$"
            }
        ]
    }
}
